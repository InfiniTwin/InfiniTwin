using [UI]
using [UI].Layout
using [UI].Widgets
using [UI].Styles
using [UI].Elements
using [CORE]
using [CORE].Actions

const windowIcon: "e6fa" // Select Window
const windowLabel: "IT::Window"
const layersLabel: "IT::Layers"
const hierarchyLabel: "IT::Hierarchy"
const attributesLabel: "IT::Attributes"

const languageIcon: "e894" // Language
const englishLabel: "English"
const germanLabel: "Deutsch"
const italianLabel: "Italiano"

[UI].ViewportMain {
    Viewport
    ToolbarTop: IsConstraintCanvas {
        Border: IsBorder, VAlignTop, HAlignFill, PaddingNone {
            Brush: BrushSurface {}
            Top: IsHBox, AlignFill, PaddingNone {
                Left: IsHBox, FillWidthOne, AlignCenterLeft, PaddingNone {
                    MenuWindows: MenuBelow, AlignCenterLeft, PaddingNone {
                        ToggleWindow: ToggleButtonIconText {
                            Container.Icon {Icon: {$windowIcon}}
                            Container.Label {Text: {$windowLabel}}
                            ActionMenuOpen: ActionWidgetOpen {(CheckBoxState, Checked)}
                            ActionMenuClose: ActionWidgetClose {(CheckBoxState, Unchecked)}
                        }
                        Content: VMenuContent {
                            Container {
                                Layers: CheckBoxButton {
                                    Container.Label {Text: {$layersLabel}}
                                }
                                Hierarchy: CheckBoxButton {
                                    Container.Label {Text: {$hierarchyLabel}}
                                }
                                Attributes: CheckBoxButton {
                                    Container.Label {Text: {$attributesLabel}}
                                }
                                Layers {(CheckBoxState, Unchecked)}
                                Hierarchy {(CheckBoxState, Unchecked)}
                                Attributes {(CheckBoxState, Unchecked)}
                            }
                        }
                    }
                }
                Right: IsHBox, FillWidthOne, AlignCenterRight, PaddingNone {
                    MenuLanguages: MenuBelowRight, AlignCenterRight, PaddingNone {
                        ToggleMenuLanguage: ToggleButtonIcon {
                            Container.Icon {Icon: {$languageIcon}}
                            ActionMenuOpen: ActionWidgetOpen {(CheckBoxState, Checked)}
                            ActionMenuClose: ActionWidgetClose {(CheckBoxState, Unchecked)}
                        }
                        Content: VMenuContent {
                            Container {
                                English: RadioButton {
                                    Container.Label {Text: {$englishLabel}}
                                    ActionLanguageEN: ActionSetLanguage {}
                                }
                                German: RadioButton {
                                    Container.Label {Text: {$germanLabel}}
                                    ActionLanguageDE: ActionSetLanguage {Code: {"using [UI]\\n\\n\$ < | Locale: <\"de\">"}}
                                }
                                Italian: RadioButton {
                                    Container.Label {Text: {$italianLabel}}
                                    ActionLanguageIT: ActionSetLanguage {Code: {"using [UI]\\n\\n\$ < | Locale: <\"it\">"}}
                                }
                                English {(CheckBoxState, Checked)}
                                German {(CheckBoxState, Unchecked)}
                                Italian {(CheckBoxState, Unchecked)}
                            }
                        }
                    }
                }
            }
        }
    }
}

[UI].ViewportMain.ToolbarTop.Border.Top.Left.MenuWindows.Content.Container.Layers {
    Window: IsWindow {Text: {$layersLabel}}
    ActionWindowOpen: ActionWindowOpen {(CheckBoxState, Checked)}
}

[UI].ViewportMain.ToolbarTop.Border.Top.Left.MenuWindows.Content.Container.Hierarchy {
    Window: IsWindow {Text: {$hierarchyLabel}}
    ActionWindowOpen: ActionWindowOpen {(CheckBoxState, Checked)}
}

[UI].ViewportMain.ToolbarTop.Border.Top.Left.MenuWindows.Content.Container.Attributes {
    Window: IsWindow {Text: {$attributesLabel}}
    ActionWindowOpen: ActionWindowOpen {(CheckBoxState, Checked)}
}
